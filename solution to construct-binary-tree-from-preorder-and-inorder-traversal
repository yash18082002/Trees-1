// Time Complexity : O(n)
// Space Complexity : O(n)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

// use hashmap to construct the tree recursively

class Solution {
    HashMap<Integer, Integer> map;
    int idx;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(inorder == null || inorder.length == 0 || preorder == null || preorder.length == 0) {
            return null;
        }
        map = new HashMap<>();
        idx = 0;
        for(int i = 0; i < inorder.length; i++) {
            map.put(inorder[i], i);
        }
        return recurse(preorder, 0, inorder.length - 1);
    }
    private TreeNode recurse(int[] preorder, int start, int end) {
        if(start > end) {
            return null;
        }
        int rootVal = preorder[idx];
        idx++;
        TreeNode root = new TreeNode(rootVal);
        int rootIdx = map.get(rootVal);
        root.left = recurse(preorder, start, rootIdx - 1);
        root.right = recurse(preorder, rootIdx + 1, end);
        return root;
    }
}
